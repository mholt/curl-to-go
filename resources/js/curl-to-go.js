/*
	curl-to-Go
	by Matt Holt

	https://github.com/mholt/curl-to-go

	A simple utility to convert curl commands into Go code.
*/

function curlToGo(curl) {
	var err = 'if err != nil {\n\t// handle err\n}\n';
	var deferClose = 'defer resp.Body.Close()\n';
	var promo = "// Generated by curl-to-Go: https://mholt.github.io/curl-to-go";
	var originalCmd = curl.split(/\r\n?|\n/).map((line) => `// ${line}`).join('\n');
	var header = `${promo}\n\n${originalCmd}\n\n`;

	// Options are extracted from curl's source code by extract_curl_args.py
	// BEGIN GENERATED CURL OPTIONS
	var longOptions = {
		'url': {type: 'string'},
		'dns-ipv4-addr': {type: 'string'},
		'dns-ipv6-addr': {type: 'string'},
		'random-file': {type: 'string'},
		'egd-file': {type: 'string'},
		'oauth2-bearer': {type: 'string'},
		'connect-timeout': {type: 'string'},
		'doh-url': {type: 'string'},
		'ciphers': {type: 'string'},
		'dns-interface': {type: 'string'},
		'disable-epsv': {type: 'bool', name: 'epsv'},
		'no-disable-epsv': {type: 'bool', name: 'epsv', expand: false},
		'disallow-username-in-url': {type: 'bool'},
		'no-disallow-username-in-url': {type: 'bool', name: 'disallow-username-in-url', expand: false},
		'epsv': {type: 'bool'},
		'no-epsv': {type: 'bool', name: 'epsv', expand: false},
		'dns-servers': {type: 'string'},
		'trace': {type: 'string'},
		'npn': {type: 'bool'},
		'no-npn': {type: 'bool', name: 'npn', expand: false},
		'trace-ascii': {type: 'string'},
		'alpn': {type: 'bool'},
		'no-alpn': {type: 'bool', name: 'alpn', expand: false},
		'limit-rate': {type: 'string'},
		'compressed': {type: 'bool'},
		'no-compressed': {type: 'bool', name: 'compressed', expand: false},
		'tr-encoding': {type: 'bool'},
		'no-tr-encoding': {type: 'bool', name: 'tr-encoding', expand: false},
		'digest': {type: 'bool'},
		'no-digest': {type: 'bool', name: 'digest', expand: false},
		'negotiate': {type: 'bool'},
		'no-negotiate': {type: 'bool', name: 'negotiate', expand: false},
		'ntlm': {type: 'bool'},
		'no-ntlm': {type: 'bool', name: 'ntlm', expand: false},
		'ntlm-wb': {type: 'bool'},
		'no-ntlm-wb': {type: 'bool', name: 'ntlm-wb', expand: false},
		'basic': {type: 'bool'},
		'no-basic': {type: 'bool', name: 'basic', expand: false},
		'anyauth': {type: 'bool'},
		'no-anyauth': {type: 'bool', name: 'anyauth', expand: false},
		'wdebug': {type: 'bool'},
		'no-wdebug': {type: 'bool', name: 'wdebug', expand: false},
		'ftp-create-dirs': {type: 'bool'},
		'no-ftp-create-dirs': {type: 'bool', name: 'ftp-create-dirs', expand: false},
		'create-dirs': {type: 'bool'},
		'no-create-dirs': {type: 'bool', name: 'create-dirs', expand: false},
		'create-file-mode': {type: 'string'},
		'max-redirs': {type: 'string'},
		'proxy-ntlm': {type: 'bool'},
		'no-proxy-ntlm': {type: 'bool', name: 'proxy-ntlm', expand: false},
		'crlf': {type: 'bool'},
		'no-crlf': {type: 'bool', name: 'crlf', expand: false},
		'stderr': {type: 'string'},
		'aws-sigv4': {type: 'string'},
		'interface': {type: 'string'},
		'krb': {type: 'string'},
		'krb4': {type: 'string', name: 'krb'},
		'haproxy-protocol': {type: 'bool'},
		'no-haproxy-protocol': {type: 'bool', name: 'haproxy-protocol', expand: false},
		'max-filesize': {type: 'string'},
		'disable-eprt': {type: 'bool', name: 'eprt'},
		'no-disable-eprt': {type: 'bool', name: 'eprt', expand: false},
		'eprt': {type: 'bool'},
		'no-eprt': {type: 'bool', name: 'eprt', expand: false},
		'xattr': {type: 'bool'},
		'no-xattr': {type: 'bool', name: 'xattr', expand: false},
		'ftp-ssl': {type: 'bool', name: 'ssl'},
		'no-ftp-ssl': {type: 'bool', name: 'ssl', expand: false},
		'ssl': {type: 'bool'},
		'no-ssl': {type: 'bool', name: 'ssl', expand: false},
		'ftp-pasv': {type: 'bool'},
		'no-ftp-pasv': {type: 'bool', name: 'ftp-pasv', expand: false},
		'socks5': {type: 'string'},
		'tcp-nodelay': {type: 'bool'},
		'no-tcp-nodelay': {type: 'bool', name: 'tcp-nodelay', expand: false},
		'proxy-digest': {type: 'bool'},
		'no-proxy-digest': {type: 'bool', name: 'proxy-digest', expand: false},
		'proxy-basic': {type: 'bool'},
		'no-proxy-basic': {type: 'bool', name: 'proxy-basic', expand: false},
		'retry': {type: 'string'},
		'retry-connrefused': {type: 'bool'},
		'no-retry-connrefused': {type: 'bool', name: 'retry-connrefused', expand: false},
		'retry-delay': {type: 'string'},
		'retry-max-time': {type: 'string'},
		'proxy-negotiate': {type: 'bool'},
		'no-proxy-negotiate': {type: 'bool', name: 'proxy-negotiate', expand: false},
		'ftp-account': {type: 'string'},
		'proxy-anyauth': {type: 'bool'},
		'no-proxy-anyauth': {type: 'bool', name: 'proxy-anyauth', expand: false},
		'trace-time': {type: 'bool'},
		'no-trace-time': {type: 'bool', name: 'trace-time', expand: false},
		'ignore-content-length': {type: 'bool'},
		'no-ignore-content-length': {type: 'bool', name: 'ignore-content-length', expand: false},
		'ftp-skip-pasv-ip': {type: 'bool'},
		'no-ftp-skip-pasv-ip': {type: 'bool', name: 'ftp-skip-pasv-ip', expand: false},
		'ftp-method': {type: 'string'},
		'local-port': {type: 'string'},
		'socks4': {type: 'string'},
		'socks4a': {type: 'string'},
		'ftp-alternative-to-user': {type: 'string'},
		'ftp-ssl-reqd': {type: 'bool', name: 'ssl-reqd'},
		'no-ftp-ssl-reqd': {type: 'bool', name: 'ssl-reqd', expand: false},
		'ssl-reqd': {type: 'bool'},
		'no-ssl-reqd': {type: 'bool', name: 'ssl-reqd', expand: false},
		'sessionid': {type: 'bool'},
		'no-sessionid': {type: 'bool', name: 'sessionid', expand: false},
		'ftp-ssl-control': {type: 'bool'},
		'no-ftp-ssl-control': {type: 'bool', name: 'ftp-ssl-control', expand: false},
		'ftp-ssl-ccc': {type: 'bool'},
		'no-ftp-ssl-ccc': {type: 'bool', name: 'ftp-ssl-ccc', expand: false},
		'ftp-ssl-ccc-mode': {type: 'string'},
		'libcurl': {type: 'string'},
		'raw': {type: 'bool'},
		'no-raw': {type: 'bool', name: 'raw', expand: false},
		'post301': {type: 'bool'},
		'no-post301': {type: 'bool', name: 'post301', expand: false},
		'keepalive': {type: 'bool'},
		'no-keepalive': {type: 'bool', name: 'keepalive', expand: false},
		'socks5-hostname': {type: 'string'},
		'keepalive-time': {type: 'string'},
		'post302': {type: 'bool'},
		'no-post302': {type: 'bool', name: 'post302', expand: false},
		'noproxy': {type: 'string'},
		'socks5-gssapi-nec': {type: 'bool'},
		'no-socks5-gssapi-nec': {type: 'bool', name: 'socks5-gssapi-nec', expand: false},
		'proxy1.0': {type: 'string'},
		'tftp-blksize': {type: 'string'},
		'mail-from': {type: 'string'},
		'mail-rcpt': {type: 'string'},
		'ftp-pret': {type: 'bool'},
		'no-ftp-pret': {type: 'bool', name: 'ftp-pret', expand: false},
		'proto': {type: 'string'},
		'proto-redir': {type: 'string'},
		'resolve': {type: 'string'},
		'delegation': {type: 'string'},
		'mail-auth': {type: 'string'},
		'post303': {type: 'bool'},
		'no-post303': {type: 'bool', name: 'post303', expand: false},
		'metalink': {type: 'bool'},
		'no-metalink': {type: 'bool', name: 'metalink', expand: false},
		'sasl-authzid': {type: 'string'},
		'sasl-ir': {type: 'bool'},
		'no-sasl-ir': {type: 'bool', name: 'sasl-ir', expand: false},
		'test-event': {type: 'bool'},
		'no-test-event': {type: 'bool', name: 'test-event', expand: false},
		'unix-socket': {type: 'string'},
		'path-as-is': {type: 'bool'},
		'no-path-as-is': {type: 'bool', name: 'path-as-is', expand: false},
		'socks5-gssapi-service': {type: 'string', name: 'proxy-service-name'},
		'proxy-service-name': {type: 'string'},
		'service-name': {type: 'string'},
		'proto-default': {type: 'string'},
		'expect100-timeout': {type: 'string'},
		'tftp-no-options': {type: 'bool'},
		'no-tftp-no-options': {type: 'bool', name: 'tftp-no-options', expand: false},
		'connect-to': {type: 'string'},
		'abstract-unix-socket': {type: 'string'},
		'tls-max': {type: 'string'},
		'suppress-connect-headers': {type: 'bool'},
		'no-suppress-connect-headers': {type: 'bool', name: 'suppress-connect-headers', expand: false},
		'compressed-ssh': {type: 'bool'},
		'no-compressed-ssh': {type: 'bool', name: 'compressed-ssh', expand: false},
		'happy-eyeballs-timeout-ms': {type: 'string'},
		'retry-all-errors': {type: 'bool'},
		'no-retry-all-errors': {type: 'bool', name: 'retry-all-errors', expand: false},
		'http1.0': {type: 'bool'},
		'http1.1': {type: 'bool'},
		'http2': {type: 'bool'},
		'http2-prior-knowledge': {type: 'bool'},
		'http3': {type: 'bool'},
		'http0.9': {type: 'bool'},
		'no-http0.9': {type: 'bool', name: 'http0.9', expand: false},
		'tlsv1': {type: 'bool'},
		'tlsv1.0': {type: 'bool'},
		'tlsv1.1': {type: 'bool'},
		'tlsv1.2': {type: 'bool'},
		'tlsv1.3': {type: 'bool'},
		'tls13-ciphers': {type: 'string'},
		'proxy-tls13-ciphers': {type: 'string'},
		'sslv2': {type: 'bool'},
		'sslv3': {type: 'bool'},
		'ipv4': {type: 'bool'},
		'ipv6': {type: 'bool'},
		'append': {type: 'bool'},
		'no-append': {type: 'bool', name: 'append', expand: false},
		'user-agent': {type: 'string'},
		'cookie': {type: 'string'},
		'alt-svc': {type: 'string'},
		'hsts': {type: 'string'},
		'use-ascii': {type: 'bool'},
		'no-use-ascii': {type: 'bool', name: 'use-ascii', expand: false},
		'cookie-jar': {type: 'string'},
		'continue-at': {type: 'string'},
		'data': {type: 'string'},
		'data-raw': {type: 'string'},
		'data-ascii': {type: 'string'},
		'data-binary': {type: 'string'},
		'data-urlencode': {type: 'string'},
		'dump-header': {type: 'string'},
		'referer': {type: 'string'},
		'cert': {type: 'string'},
		'cacert': {type: 'string'},
		'cert-type': {type: 'string'},
		'key': {type: 'string'},
		'key-type': {type: 'string'},
		'pass': {type: 'string'},
		'engine': {type: 'string'},
		'capath': {type: 'string'},
		'pubkey': {type: 'string'},
		'hostpubmd5': {type: 'string'},
		'crlfile': {type: 'string'},
		'tlsuser': {type: 'string'},
		'tlspassword': {type: 'string'},
		'tlsauthtype': {type: 'string'},
		'ssl-allow-beast': {type: 'bool'},
		'no-ssl-allow-beast': {type: 'bool', name: 'ssl-allow-beast', expand: false},
		'ssl-auto-client-cert': {type: 'bool'},
		'no-ssl-auto-client-cert': {type: 'bool', name: 'ssl-auto-client-cert', expand: false},
		'proxy-ssl-auto-client-cert': {type: 'bool'},
		'no-proxy-ssl-auto-client-cert': {type: 'bool', name: 'proxy-ssl-auto-client-cert', expand: false},
		'pinnedpubkey': {type: 'string'},
		'proxy-pinnedpubkey': {type: 'string'},
		'cert-status': {type: 'bool'},
		'no-cert-status': {type: 'bool', name: 'cert-status', expand: false},
		'doh-cert-status': {type: 'bool'},
		'no-doh-cert-status': {type: 'bool', name: 'doh-cert-status', expand: false},
		'false-start': {type: 'bool'},
		'no-false-start': {type: 'bool', name: 'false-start', expand: false},
		'ssl-no-revoke': {type: 'bool'},
		'no-ssl-no-revoke': {type: 'bool', name: 'ssl-no-revoke', expand: false},
		'ssl-revoke-best-effort': {type: 'bool'},
		'no-ssl-revoke-best-effort': {type: 'bool', name: 'ssl-revoke-best-effort', expand: false},
		'tcp-fastopen': {type: 'bool'},
		'no-tcp-fastopen': {type: 'bool', name: 'tcp-fastopen', expand: false},
		'proxy-tlsuser': {type: 'string'},
		'proxy-tlspassword': {type: 'string'},
		'proxy-tlsauthtype': {type: 'string'},
		'proxy-cert': {type: 'string'},
		'proxy-cert-type': {type: 'string'},
		'proxy-key': {type: 'string'},
		'proxy-key-type': {type: 'string'},
		'proxy-pass': {type: 'string'},
		'proxy-ciphers': {type: 'string'},
		'proxy-crlfile': {type: 'string'},
		'proxy-ssl-allow-beast': {type: 'bool'},
		'no-proxy-ssl-allow-beast': {type: 'bool', name: 'proxy-ssl-allow-beast', expand: false},
		'login-options': {type: 'string'},
		'proxy-cacert': {type: 'string'},
		'proxy-capath': {type: 'string'},
		'proxy-insecure': {type: 'bool'},
		'no-proxy-insecure': {type: 'bool', name: 'proxy-insecure', expand: false},
		'proxy-tlsv1': {type: 'bool'},
		'socks5-basic': {type: 'bool'},
		'no-socks5-basic': {type: 'bool', name: 'socks5-basic', expand: false},
		'socks5-gssapi': {type: 'bool'},
		'no-socks5-gssapi': {type: 'bool', name: 'socks5-gssapi', expand: false},
		'etag-save': {type: 'string'},
		'etag-compare': {type: 'string'},
		'curves': {type: 'string'},
		'fail': {type: 'bool'},
		'no-fail': {type: 'bool', name: 'fail', expand: false},
		'fail-early': {type: 'bool'},
		'no-fail-early': {type: 'bool', name: 'fail-early', expand: false},
		'styled-output': {type: 'bool'},
		'no-styled-output': {type: 'bool', name: 'styled-output', expand: false},
		'mail-rcpt-allowfails': {type: 'bool'},
		'no-mail-rcpt-allowfails': {type: 'bool', name: 'mail-rcpt-allowfails', expand: false},
		'fail-with-body': {type: 'bool'},
		'no-fail-with-body': {type: 'bool', name: 'fail-with-body', expand: false},
		'form': {type: 'string'},
		'form-string': {type: 'string'},
		'globoff': {type: 'bool'},
		'no-globoff': {type: 'bool', name: 'globoff', expand: false},
		'get': {type: 'bool'},
		'request-target': {type: 'string'},
		'help': {type: 'bool'},
		'no-help': {type: 'bool', name: 'help', expand: false},
		'header': {type: 'string'},
		'proxy-header': {type: 'string'},
		'include': {type: 'bool'},
		'no-include': {type: 'bool', name: 'include', expand: false},
		'head': {type: 'bool'},
		'no-head': {type: 'bool', name: 'head', expand: false},
		'junk-session-cookies': {type: 'bool'},
		'no-junk-session-cookies': {type: 'bool', name: 'junk-session-cookies', expand: false},
		'remote-header-name': {type: 'bool'},
		'no-remote-header-name': {type: 'bool', name: 'remote-header-name', expand: false},
		'insecure': {type: 'bool'},
		'no-insecure': {type: 'bool', name: 'insecure', expand: false},
		'doh-insecure': {type: 'bool'},
		'no-doh-insecure': {type: 'bool', name: 'doh-insecure', expand: false},
		'config': {type: 'string'},
		'list-only': {type: 'bool'},
		'no-list-only': {type: 'bool', name: 'list-only', expand: false},
		'location': {type: 'bool'},
		'no-location': {type: 'bool', name: 'location', expand: false},
		'location-trusted': {type: 'bool'},
		'no-location-trusted': {type: 'bool', name: 'location-trusted', expand: false},
		'max-time': {type: 'string'},
		'manual': {type: 'bool'},
		'no-manual': {type: 'bool', name: 'manual', expand: false},
		'netrc': {type: 'bool'},
		'no-netrc': {type: 'bool', name: 'netrc', expand: false},
		'netrc-optional': {type: 'bool'},
		'no-netrc-optional': {type: 'bool', name: 'netrc-optional', expand: false},
		'netrc-file': {type: 'string'},
		'buffer': {type: 'bool'},
		'no-buffer': {type: 'bool', name: 'buffer', expand: false},
		'output': {type: 'string'},
		'remote-name': {type: 'bool'},
		'remote-name-all': {type: 'bool'},
		'no-remote-name-all': {type: 'bool', name: 'remote-name-all', expand: false},
		'output-dir': {type: 'string'},
		'proxytunnel': {type: 'bool'},
		'no-proxytunnel': {type: 'bool', name: 'proxytunnel', expand: false},
		'ftp-port': {type: 'string'},
		'disable': {type: 'bool'},
		'no-disable': {type: 'bool', name: 'disable', expand: false},
		'quote': {type: 'string'},
		'range': {type: 'string'},
		'remote-time': {type: 'bool'},
		'no-remote-time': {type: 'bool', name: 'remote-time', expand: false},
		'silent': {type: 'bool'},
		'no-silent': {type: 'bool', name: 'silent', expand: false},
		'show-error': {type: 'bool'},
		'no-show-error': {type: 'bool', name: 'show-error', expand: false},
		'telnet-option': {type: 'string'},
		'upload-file': {type: 'string'},
		'user': {type: 'string'},
		'proxy-user': {type: 'string'},
		'verbose': {type: 'bool'},
		'no-verbose': {type: 'bool', name: 'verbose', expand: false},
		'version': {type: 'bool'},
		'no-version': {type: 'bool', name: 'version', expand: false},
		'write-out': {type: 'string'},
		'proxy': {type: 'string'},
		'preproxy': {type: 'string'},
		'request': {type: 'string'},
		'speed-limit': {type: 'string'},
		'speed-time': {type: 'string'},
		'time-cond': {type: 'string'},
		'parallel': {type: 'bool'},
		'no-parallel': {type: 'bool', name: 'parallel', expand: false},
		'parallel-max': {type: 'string'},
		'parallel-immediate': {type: 'bool'},
		'no-parallel-immediate': {type: 'bool', name: 'parallel-immediate', expand: false},
		'progress-bar': {type: 'bool'},
		'no-progress-bar': {type: 'bool', name: 'progress-bar', expand: false},
		'progress-meter': {type: 'bool'},
		'no-progress-meter': {type: 'bool', name: 'progress-meter', expand: false},
		'next': {type: 'bool'},
	};

	var shortOptions = {
		'0': 'http1.0',
		'1': 'tlsv1',
		'2': 'sslv2',
		'3': 'sslv3',
		'4': 'ipv4',
		'6': 'ipv6',
		'a': 'append',
		'A': 'user-agent',
		'b': 'cookie',
		'B': 'use-ascii',
		'c': 'cookie-jar',
		'C': 'continue-at',
		'd': 'data',
		'D': 'dump-header',
		'e': 'referer',
		'E': 'cert',
		'f': 'fail',
		'F': 'form',
		'g': 'globoff',
		'G': 'get',
		'h': 'help',
		'H': 'header',
		'i': 'include',
		'I': 'head',
		'j': 'junk-session-cookies',
		'J': 'remote-header-name',
		'k': 'insecure',
		'K': 'config',
		'l': 'list-only',
		'L': 'location',
		'm': 'max-time',
		'M': 'manual',
		'n': 'netrc',
		'N': 'no-buffer',
		'o': 'output',
		'O': 'remote-name',
		'p': 'proxytunnel',
		'P': 'ftp-port',
		'q': 'disable',
		'Q': 'quote',
		'r': 'range',
		'R': 'remote-time',
		's': 'silent',
		'S': 'show-error',
		't': 'telnet-option',
		'T': 'upload-file',
		'u': 'user',
		'U': 'proxy-user',
		'v': 'verbose',
		'V': 'version',
		'w': 'write-out',
		'x': 'proxy',
		'X': 'request',
		'Y': 'speed-limit',
		'y': 'speed-time',
		'z': 'time-cond',
		'Z': 'parallel',
		'#': 'progress-bar',
		':': 'next',
	};
	// END GENERATED CURL OPTIONS


	const shortened = {};
	for (const [opt, val] of Object.entries(longOptions)) {
		if (!val.hasOwnProperty('name'))
			val.name = opt;

		// curl lets you not type the full argument as long as it's unambiguous.
		// So --sil instead of --silent is okay, --s is not.
		// This doesn't apply to options starting with --no-
		// Default 'expand' to true if not specified
		const shouldExpand = !val.hasOwnProperty('expand') || val.expand;
		delete val['expand'];
		if (shouldExpand) {
			for (let i = 1; i < opt.length; i++) {
				var shortenedOpt = opt.slice(0, i);
				if (!shortened.hasOwnProperty(shortenedOpt))
					shortened[shortenedOpt] = [];
				shortened[shortenedOpt].push(val);
			}
		}
	}
	for (const [shortenedOpt, vals] of Object.entries(shortened)) {
		if (!longOptions.hasOwnProperty(shortenedOpt)) {
			if (vals.length === 1) {
				longOptions[shortenedOpt] = vals[0];
			} else if (vals.length > 1) {
				// More than one option shortens to this, it's ambiguous
				longOptions[shortenedOpt] = null;
			}
		}
	}

	// If user is manually typing a curl command, hold off on showing an error
	if (["", "c", "cu", "cur"].includes(curl.trim()))
		return;
	var cmd = parseCommand(curl, { longOptions, shortOptions });

	if (cmd._[0] != "curl")
		throw "Not a curl command";

	var req = extractRelevantPieces(cmd);

	if (Object.keys(req.headers).length == 0 && !req.data.ascii && !req.data.files && !req.basicauth && !req.insecure) {
		return header+renderSimple(req.method, req.url);
	} else {
		return header+renderComplex(req);
	}


	// renderSimple renders a simple HTTP request using net/http convenience methods
	function renderSimple(method, url) {
		if (method == "GET")
			return 'resp, err := http.Get('+goExpandEnv(url)+')\n'+err+deferClose;
		else if (method == "POST")
			return 'resp, err := http.Post('+goExpandEnv(url)+', "", nil)\n'+err+deferClose;
		else if (method == "HEAD")
			return 'resp, err := http.Head('+goExpandEnv(url)+')\n'+err+deferClose;
		else
			return 'req, err := http.NewRequest('+goExpandEnv(method)+', '+goExpandEnv(url)+', nil)\n'+err+'resp, err := http.DefaultClient.Do(req)\n'+err+deferClose;
	}

	// renderComplex renders Go code that requires making a http.Request.
	function renderComplex(req) {
		var go = "";

		// init client name
		var clientName = "http.DefaultClient";

		// insecure
		// -k or --insecure
		if (req.insecure) {
			go += '// TODO: This is insecure; use only in dev environments.\n';
			go += 'tr := &http.Transport{\n' +
				'        TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n' +
				'    }\n' +
				'    client := &http.Client{Transport: tr}\n\n';

			clientName = "client";
		}

		// load body data
		// KNOWN ISSUE: -d and --data are treated like --data-binary in
		// that we don't strip out carriage returns and newlines.
		var defaultPayloadVar = "body";
		if (!req.data.ascii && !req.data.files) {
			// no data; this is easy
			go += 'req, err := http.NewRequest("'+req.method+'", '+goExpandEnv(req.url)+', nil)\n'+err;
		} else {
			var ioReaders = [];

			// if there's text data...
			if (req.data.ascii) {
				var stringBody = function() {
					if (req.dataType == "raw" ) {
						go += defaultPayloadVar+' := strings.NewReader("'+req.data.ascii.replace(/\"/g, "\\\"") +'")\n'
					} else {
						go += defaultPayloadVar+' := strings.NewReader(`'+req.data.ascii+'`)\n'
					}
					ioReaders.push(defaultPayloadVar);
				}

				if (req.headers["Content-Type"] && req.headers["Content-Type"].indexOf("json") > -1) {
					// create a struct for the JSON
					var result = jsonToGo(req.data.ascii, "Payload");
					if (result.error)
						stringBody(); // not valid JSON, so just treat as a regular string
					else if (result.go) {
						// valid JSON, so create a struct to hold it
						go += result.go+'\n\ndata := Payload {\n\t// fill struct\n}\n';
						go += 'payloadBytes, err := json.Marshal(data)\n'+err;
						go += defaultPayloadVar+' := bytes.NewReader(payloadBytes)\n\n';
					}
				} else if(req.headers["Content-Type"] && req.headers["Content-Type"] == "application/x-www-form-urlencoded") {
						go += "params := url.Values{}\n"
						var params = new URLSearchParams(req.data.ascii);
						params.forEach(function(fvalue, fkey){
							go += 'params.Add("' + fkey + '", `' + fvalue + '`)\n'
						});
						go += defaultPayloadVar+ ' := strings.NewReader(params.Encode())\n\n'
				} else {
					// not a json Content-Type, so treat as string
					stringBody();
				}
			}

			// if file data...
			if (req.data.files && req.data.files.length > 0) {
				var varName = "f";
				for (var i = 0; i < req.data.files.length; i++) {
					var thisVarName = (req.data.files.length > 1 ? varName+(i+1) : varName);
					go += thisVarName+', err := os.Open('+goExpandEnv(req.data.files[i])+')\n'+err;
					go += 'defer '+thisVarName+'.Close()\n';
					ioReaders.push(thisVarName);
				}
			}

			// render go code to put all the data in the body, concatenating if necessary
			var payloadVar = defaultPayloadVar;
			if (ioReaders.length > 0)
				payloadVar = ioReaders[0];
			if (ioReaders.length > 1) {
				payloadVar = "payload";
				// KNOWN ISSUE: The way we separate file and ascii data values
				// loses the order between them... our code above just puts the
				// ascii values first, followed by the files.
				go += 'payload := io.MultiReader('+ioReaders.join(", ")+')\n';
			}
			go += 'req, err := http.NewRequest("'+req.method+'", '+goExpandEnv(req.url)+', '+payloadVar+')\n'+err;
		}

		// set basic auth
		if (req.basicauth) {
			go += 'req.SetBasicAuth('+goExpandEnv(req.basicauth.user)+', '+goExpandEnv(req.basicauth.pass)+')\n';
		}

		// if a Host header was set, we need to specify that specially
		// (see the godoc for the http.Request.Host field) - issue #15
		if (req.headers["Host"]) {
			go += 'req.Host = "'+req.headers["Host"]+'"\n';
			delete req.headers["Host"];
		}

		// set headers
		for (var name in req.headers) {
			go += 'req.Header.Set('+goExpandEnv(name)+', '+goExpandEnv(req.headers[name])+')\n';
		}

		// execute request
		go += "\nresp, err := "+clientName+".Do(req)\n";
		go += err+deferClose;

		return go;
	}

	// extractRelevantPieces returns an object with relevant pieces
	// extracted from cmd, the parsed command. This accounts for
	// multiple flags that do the same thing and return structured
	// data that makes it easy to spit out Go code.
	function extractRelevantPieces(cmd) {
		var relevant = {
			url: "",
			method: "",
			headers: [],
			data: {},
			dataType: "string",
			insecure: false
		};

		// prefer --url over unnamed parameter, if it exists; keep first one only
		if (cmd.url && cmd.url.length > 0)
			relevant.url = cmd.url[0];
		else if (cmd._.length > 1)
			relevant.url = cmd._[1]; // position 1 because index 0 is the curl command itself

		// gather the headers together
		if (cmd.header)
			relevant.headers = relevant.headers.concat(cmd.header);
		relevant.headers = parseHeaders(relevant.headers)

		// set method to HEAD?
		if (cmd.head)
			relevant.method = "HEAD";

		if (cmd.request && cmd.request.length > 0)
			relevant.method = cmd.request[cmd.request.length-1].toUpperCase(); // if multiple, use last (according to curl docs)
		else if (
			(cmd["data-binary"] && cmd["data-binary"].length > 0)
			|| (cmd["data-raw"] && cmd["data-raw"].length > 0)
		) {
			// for --data-binary and --data-raw, use method POST & data-type raw
			relevant.method = "POST";
			relevant.dataType = "raw";
		}

		// join multiple request body data, if any
		var dataAscii = [];
		var dataFiles = [];
		var loadData = function (d, dataRawFlag = false) {
			if (!relevant.method)
				relevant.method = "POST";

			// according to issue #8, curl adds a default Content-Type
			// header if one is not set explicitly
			if (!relevant.headers["Content-Type"])
				relevant.headers["Content-Type"] = "application/x-www-form-urlencoded";

			for (var i = 0; i < d.length; i++) {
				if (
					d[i].length > 0 && d[i][0] == "@"
					&& !dataRawFlag // data-raw flag ignores '@' character
				) {
					dataFiles.push(d[i].substr(1));
				} else {
					dataAscii.push(d[i]);
				}
			}
		};
		if (cmd.data)
			loadData(cmd.data);
		if (cmd["data-binary"])
			loadData(cmd["data-binary"]);
		if (cmd["data-raw"])
			loadData(cmd["data-raw"], true)
		if (dataAscii.length > 0)
			relevant.data.ascii = dataAscii.join("&");
		if (dataFiles.length > 0)
			relevant.data.files = dataFiles;

		var basicAuthString = "";
		if (cmd.user && cmd.user.length > 0)
			basicAuthString = cmd.user[cmd.user.length-1];
		// if the -u or --user flags haven't been set then don't set the
		// basicauth property.
		if (basicAuthString) {
			var basicAuthSplit = basicAuthString.indexOf(":");
			if (basicAuthSplit > -1) {
				relevant.basicauth = {
					user: basicAuthString.substr(0, basicAuthSplit),
					pass: basicAuthString.substr(basicAuthSplit+1)
				};
			} else {
				// the user has not provided a password
				relevant.basicauth = { user: basicAuthString, pass: "<PASSWORD>" };
			}
		}

		// default to GET if nothing else specified
		if (!relevant.method)
			relevant.method = "GET";

		if (cmd.insecure) {
			relevant.insecure = true;
		}

		return relevant;
	}

	// parseHeaders converts an array of header strings (like "Content-Type: foo")
	// into a map of key/values. It assumes header field names are unique.
	function parseHeaders(stringHeaders) {
		var headers = {};
		for (var i = 0; i < stringHeaders.length; i++) {
			var split = stringHeaders[i].indexOf(":");
			if (split == -1) continue;
			var name = stringHeaders[i].substr(0, split).trim();
			var value = stringHeaders[i].substr(split+1).trim();
			headers[toTitleCase(name)] = value;
		}
		return headers;
	}

	function toTitleCase(str) {
		return str.replace(/\w*/g, function(txt) {
			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
		});
	}

	// goExpandEnv adds surrounding quotes around s to make it a Go string,
	// escaping any characters as needed. It checks to see if s has an
	// environment variable in it. If so, it returns s wrapped in a Go
	// function that expands the environment variable. Otherwise, it
	// returns s wrapped in quotes and escaped for use in Go strings.
	// s should not already be escaped! This function always returns a Go
	// string value.
	function goExpandEnv(s) {
		var pos = s.indexOf("$");
		if (pos > -1)
		{
			if (pos > 0 && s[pos-1] == '\\') {
				// The $ is escaped, so strip the escaping backslash
				s = s.substr(0, pos-1) + s.substr(pos);
			} else {
				// $ is not escaped, so treat it as an env variable
				return 'os.ExpandEnv("'+goEsc(s)+'")';
			}
		}
		return '"'+goEsc(s)+'"';
	}

	// goEsc escapes characters in s so that it is safe to use s in
	// a "quoted string" in a Go program
	function goEsc(s) {
		return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
	}
}


function parseCommand(input, options) {
	if (typeof options === 'undefined') {
		options = {};
	}

	var result = {_: []},  // what we return
		cursor = 0,        // iterator position
		stillFlags = true, // "--" causes all remaining args to be positional
		token = "";        // current token (word or quoted string) being built

	// trim leading $ or # that may have been left in
	input = input.trim();
	if (input.length > 2 && (input[0] == '$' || input[0] == '#') && whitespace(input[1]))
		input = input.substr(1).trim();

	for (cursor = 0; cursor < input.length; cursor++) {
		skipWhitespace();
		if (input[cursor] == "-" && stillFlags) {
			flagSet();
		} else {
			unflagged();
		}
	}

	return result;




	// flagSet handles flags and it assumes the current cursor
	// points to a first dash.
	function flagSet() {
		// long flag form?
		if (cursor < input.length-1 && input[cursor+1] == "-") {
			// "--" on its own means the rest of the input args are treated as positional,
			// even if they also start with "-" or "--"
			if (cursor === input.length-2 || cursor < input.length-2 && whitespace(input[cursor+2])) {
				stillFlags = false;
				cursor += 2;
				return;
			}
			return longFlag();
		}

		// if not, parse short flag form
		cursor++; // skip leading dash
		while (cursor < input.length && !whitespace(input[cursor]))
		{
			const shortFlag = input[cursor];
			cursor++; // skip the flag name

			var [shortOpt, opt] = getShortOption(shortFlag);
			if (typeof shortOpt === 'undefined' || typeof opt === 'undefined') {
				throw "Unknown short flag: '" + shortOpt + "'";
			}
			if (typeof result[opt.name] === 'undefined') {
				result[opt.name] = [];
			}
			if (opt.type === 'bool')
				result[opt.name] = toBool(shortOpt);
			else if (Array.isArray(result[opt.name]))
				result[opt.name].push(nextString());
		}
	}

	// longFlag consumes a "--long-flag" sequence and
	// stores it in result.
	function longFlag() {
		cursor += 2; // skip leading dashes
		var flagName = nextString("=");
		var flag = options.longOptions[flagName];
		if (flag === null) {
			throw "Ambiguous flag: '--" + flagName + "'";
		} else if (typeof flag === 'undefined') {
			throw "Unknown flag: '--" + flagName + "'";
		} else if (flag && flag.type === 'bool') {
			result[flag.name] = toBool(flagName);
		} else {
			if (typeof result[flagName] === 'undefined') {
				result[flagName] = [];
			}
			if (Array.isArray(result[flagName])) {
				result[flagName].push(nextString());
			}
		}
	}

	// unflagged consumes the next string as an unflagged value,
	// storing it in the result.
	function unflagged() {
		result._.push(nextString());
	}

	// getShortOption looks up a one letter option and also returns the long option that
	// it's short for.
	function getShortOption(shortName) {
		var shortOpt = options.shortOptions[shortName];
		var longOpt = shortOpt ? options.longOptions[shortOpt] : undefined;
		return [shortOpt, longOpt];
	}

	// toBool converts a long flag name to a boolean value.
	// --verbose -> true
	// --no-verbose -> false
	function toBool(flag) {
		// --no-disable-epsv and --no-disable-eprt
		if (flag.startsWith('no-disable-')) {
			return true;
		}
		return !(flag.startsWith('no-') || flag.startsWith('disable-'));
	}

	// nextString skips any leading whitespace and consumes the next
	// space-delimited string value and returns it. If endChar is set,
	// it will be used to determine the end of the string. Normally just
	// unescaped whitespace is the end of the string, but endChar can
	// be used to specify another end-of-string. This function honors \
	// as an escape character and does not include it in the value, except
	// in the special case of the \$ sequence, the backslash is retained
	// so other code can decide whether to treat as an env var or not.
	function nextString(endChar) {
		skipWhitespace();

		var str = "";

		var quoted = false,
			quoteCh = "",
			escaped = false,
			quoteDS = false; // Dollar-Single-Quotes

		for (; cursor < input.length; cursor++) {
			if (quoted) {
				if (input[cursor] == quoteCh && !escaped && input[cursor -1] != "\\") {
					quoted = false;
					continue;
				}
			}
			if (!quoted) {
				if (!escaped) {
					if (whitespace(input[cursor])) {
						return str;
					}
					if (input[cursor] == '"' || input[cursor] == "'") {
						quoted = true;
						quoteCh = input[cursor];
						if (str + quoteCh == "$'") {
							quoteDS = true
							str = ""
						}
						cursor++;
					}
					if (endChar && input[cursor] == endChar) {
						cursor++; // skip the endChar
						return str;
					}
				}
			}
			if (!escaped && !quoteDS && input[cursor] == "\\") {
				escaped = true;
				// skip the backslash unless the next character is $
				if (!(cursor < input.length-1 && input[cursor+1] == '$'))
					continue;
			}

			str += input[cursor];
			escaped = false;
		}

		return str;
	}

	// skipWhitespace skips whitespace between tokens, taking into account escaped whitespace.
	function skipWhitespace() {
		for (; cursor < input.length; cursor++) {
			while (input[cursor] == "\\" && (cursor < input.length-1 && whitespace(input[cursor+1])))
				cursor++;
			if (!whitespace(input[cursor]))
				break;
		}
	}

	// whitespace returns true if ch is a whitespace character.
	function whitespace(ch) {
		return ch == " " || ch == "\t" || ch == "\n" || ch == "\r";
	}
}
